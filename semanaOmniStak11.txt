----------------------------------------------------------
----------------## @@@ SEGUNDA AULA @@@ ##----------------
----------------------------------------------------------

*** METODOS HTTP, REQUISIÇÕES & ROTAS ***

	Métodos HTTP:
		app.get()  // HTTP GET
			Listar informações do backend.
		app.post() // HTTP POST
			Criar uma informação no backend.
		app.put()  // HTTP PUT
			Alterar uma informação no backend.
		app.delete()  // HTTP DELETE
			Deletar uma informação do backend.

	Quando uma rota é criada precisamos informar o caminho desta rota, por
	exemplo na função app.get('/', ...), a rota sera localhost:porta/

	Geralmente o que vem depois da '/' é um recurso, app.get('/users', ...).
	Users é o recurso que queremos acessar, ele geralmente esta associado a uma
	tabela do banco de dados ou algum recurso fornecido pela aplicação.

	Tipos de Parâmetros para uma rota:
		Query Params: Parametros nomeados enviados na rota após o simbolo de '?'.
			/products?nome=geladeira
			/products?page=2&nome=geladeira

		Route Params: Parâmetros utilizados para identificar recursos.
			/products/:id

		Request Body:
			Corpo da requisição, utilizado para criar ou alterar recursos. Um
			RequestBody não precisa conter todas as propriedades do objeto que
			sera alterado mas sim as propriedades que serão modificadas.

				usuario {
					nome: "rafael"
					email: "rafael@email.com"
					endereço: "endereço,cep,numero"
				}

			RequestBody para alterar apenas o nome:
				{
					nome:"bernardes"
				}

			Acessar os Query Params => request.query
			Acessar os Route Params => request.params
			Acessar o RequestBody => request.body

			OBS request.body:
				É preciso informar para o Express que estamos utilizando
				o formato JSON nas requisições. Antes da requisição o express
				converte o JSON do RequestBody em objeto javascript.

				app.use(express.json());

*** METODOS HTTP, REQUISIÇÕES & ROTAS ***

*** NODEMON ***

	Nodemon monitora os arquivos e reinicia o servidor quando algo é alterado.
		
		npm install nodemon -D		// devDependencies
		"dev": "nodemon index.js"	// package.json
		npm run dev					// testando

*** NODEMON ***

*** BANCO DE DADOS ***

	SQL: MySQL, SQLite, postgreSQL, Oracle, Microsoft SQL Server
	NoSQL: MongoDB, couchDB...
	
	Banco de dados SQL permite um controle maior sobre a estrutura de tabelas e
	é o mais utilizada no mercado atual. Bancos NoSQL são bastante livres e
	são pouco estruturados.

	Nessa aplicação utilizaremos banco de dados SQLite, algo simples armazenado
	na própria aplicação como um arquivo do tipo .sqite.
	
	Para uma manipulação mais simples do banco de dados utilizaremos um
	QueryBuilder Knex(http://knexjs.org/):

		npm install knex
		npm install sqlite3
		npx knex init			#arquivo de cfg do knex na raiz do projeto

*** BANCO DE DADOS ***

*** ESTRUTURA DO PROJETO ***

	Projeto deve ficar com a seguinte estrutura:
		./
        └── src
			└── index.js
			└── routes.js
			└── database
				└── db.sqlite
		knexfile.js
		package.json

	- Alterar o script "dev" em package.json.
	- routes.js importa o Express e exporta const routes = express.Router().
	- index.js importa a const exportada por routes.js e dá um app.use(routes).
	- filename, no modo desenvolvimento knexfile para './src/database/db.sqlite'.

*** ESTRUTURA DO PROJETO ***

*** ENTIDADES E FUNCIONALIDADES ***

	Entidades:
		- ONG
		- Incident

	Funcionalidades:
		- Login ONG						- Logout ONG
		- Cadastrar ONG					- Cadastras novos casos
		- Deletar casos					- Listar casos especificos de uma ONG
		- Listar todos os casos			- Contato com a ONG

*** ENTIDADES E FUNCIONALIDADES ***

*** CRIANDO TABELAS NO BANCO DE DADOS ***

	Tabelas serão criadas com Migrations(http://knexjs.org/#Migrations).
	Migrations: As migrações permitem que você defina conjuntos de alterações
	de esquema, portanto é fácil atualizar um banco de dados.

	- Criar pasta 'migrations' dentro de 'database'.
	- Em knexfile.js, dentro da configuração development após connection:
		  ...
		  	},
		  	migrations: {
				  directory: './src/database/migrations
			},
			useNullAsDefault: true
		  ...

			useNullAsDefault evita o seguinte warning:
		  		"sqlite does not support inserting default values. Set the
				`useNullAsDefault` flag to hide this warning."

	- Criando tabela para entidade ONGS:
		npx knex migrate:make create_ongs

		Um arquivo será gerado na pasta migrations, a tabela deve ser criada a
		partir do método:
			exports.up = function(knex) {
				http://knexjs.org/#Schema-createTable
			};

		criar tabela: npx knex migrate:latest
		
	- Criando tabela para entidade Incidents:
		npx knex migrate:make create_incidents

		Um arquivo será gerado na pasta migrations, a tabela deve ser criada a
		partir do método:
			exports.up = function(knex) {
				http://knexjs.org/#Schema-createTable
			};

		Criar uma coluna para indicar qual é a ONG responsável pelo cadastro do
		incidente. A coluna deve ser do mesmo tipo da primary key de ongs:

			table.string('ong_id').notNullable();
        	table.foreign('ong_id').references('id').inTable('ongs');  // fk ongs

		criar tabela: npx knex migrate:latest
		
*** CRIANDO TABELAS NO BANCO DE DADOS ***

Conexão com o Banco de Dados através do arquivo /src/database/connection.js
Organizando aplicação, criando pasta controller e arquivo OngController.js
Lógica para inserir/listar ongs no arquivo OngController.js

***
	Inserir/Deletar um Incident: {

		- É preciso estar 'autenticado' como uma ONG, isso é feito obtendo o id da
		ONG no header da requisição.

		- Criar uma requisição no Insomnia, dentro da requisão editar o header:
			New header: Authorization	New value: ong_id
	
		- Buscar o id da ONG no header:
			const ong_id = req.headers.authorization;

	}

	Deletar um Incidente: {
		
		- Verificar se o incidente pertence a ONG autenticada.
		- Buscar incidente baseado no RouteParam chamado id.
		- Selecionar coluna ong_id do incidente no Banco de Dados.
		- Verificar se ong_id do BD corresponde a ong_ind do header.

			iguais => deletar e responder com status code 204.
			diferentes => retornar resposta  com status code 401 e nao deletar.
	}
***

***
	Listar casos especificos de uma ONG:

		Poderiamos criar um método no controller de incidents para listar os
		casos especificos de uma ONG mas se tivermos duas listagens em uma 
		mesma entidade é legal que criemos um novo controller para lidar com
		estas listagens extras.

		Criar um ProfileController.js
			- Buscar ong_id no header da requisição.
			- Buscar os incidents baseados no ong_id do banco de dados.
			- Listar os casos recuperados.
***

***
	Login na aplicação:
		A rota de login nada mais é do que uma rota que irá verificar se a ONG existe
		ou não.

	Criar SessionController.js e uma função create(req, res)
		- pegar id no body da requisição.
		- buscar uma ONG no BD e retornar seu nome.
		- se !ong_name => retorna status 400.
		- retorna json(ong_name).

	Criar rota post '/sessions' com a função create.
		- routes.post('/session', sessionController.create);
***

***
	Para realizar paginação dos incidentes (quebrar a quantidade de registros
	mostrados por pagina) e retornar os dados da ONG junto ao incidente vamos
	alterar o método index em IncidentController.js

	1 - Obter o QueryParam chamado page, caso não exista use page = 1:
			const {page = 1} = request.query;
	
	2 - Configurar a consulta ao BD:

		Realizar join com a tabela ongs:
			.join('ongs', 'ongs.id', '=', 'incidents.ong_id') 

		Configurar a paginação:
			.limit(5)  // retorna um numero máximo incidents.
			.offset((page - 1) * 5)  // pulando registros, buscando de n em n.

		Coluna id tem o mesmo nome nas tabelas 'ongs' e 'incidents'. Quando o
		join é realizado, o id de 'ongs' sobrepoe o id de 'incidents' mas queremos
		retornar o id de 'incidents', então alteramos a projeção das informaçoes:
			.select(
				[
				'incidents.*',
				'ongs.name',
				'ongs.email',
				'ongs.whatsapp',
				'ongs.city',
				'ongs.uf'
				]
			);

		Uma boa prática é passar para o FrontEnd o total de registos no BD, esse
		valor é enviado através do header da resposta:
			const [count] = await connection('incidents').count();  // retorna um array
			console.log(count);  // {'count(*)': 14}
			res.header('X-Total-Count', count['count(*)']);  // response header
***

***
	Modulo de segurança cors:
		npm install cors

	Determina quem pode acessar nossa aplicação.
	Importar o cors no index.js, depois de declarar o app:
		app.use(cors());
***

----------------------------------------------------------
---------------## @@@ TERCEIRA AULA @@@ ##----------------
----------------------------------------------------------

1 - Criando Projeto...
			Criando diretorio (frontend) e projeto React:
				npx create-react-app frontend

2 - Organizando Projeto...
			Deixar o projeto com a seguinte estrutura:
					./
						└── public
						└── favicon.ico
						└── index.html
					└── src
						└── App.js
						index.js
					.gitignore
					package.json
					yarn.lock

3 - Renderização...
			index.html possui uma div com id="root" sem conteúdo, porém ao rodar a apli-
			cação essa div é preenchida com um <h1> vindo de App.js, como isso acontece?

	3.1 - Passos do React:
					- Monta a estrutura da pagina(html/css) a partir do javascript.
					- Javascript entra em execução depois que o html estiver montado.
					- Javascript é executado e preenche a <div> com <h1>.
	
	3.2 - index.js
					import React from 'react';
					import ReactDOM from 'react-dom';
					import App from './App';
					
				O componente App é renderizado dentro do elemento html root:
					ReactDOM.render(<App />, document.getElementById('root'));
			
	3.3 - Componente em App.js:
					export default function App() {
						return ( <h1>Hello World</h1> );
					}

4 - Componentes...
			No React, um componente nada mais é  do que uma função que retorna um HTML.

	4.1 - JSX...
				HTML escrito no javascript é chamado de JSX.

5 - Propriedades...

		Imagine uma página web com um cabeçalho que se repete em diferentes guias,
		vamos modularizar isso criando um componente customizavel chamado Header.

		- Criar um arquivo Header.js na pasta src.
		- Criar e exportar a seguinte função(componente):
					export default function Header() {
						return (
        			<header>
            		<h1>Header Component.</h1>
        			</header>
    				);	
					}
		
		- Importar Header.js em App.js
		- Criar e exportar a seguinte função:
				export function App() {
  				return (<Header />);
				}
		
		- Importar App.js em index.js
		- Renderizar utilizando ReactDom.render();
	
6 - Estado...

		Seja uma informação(variavel, listagem etc) armazenada em um componente, não
		podemos modifica-la de maneira convencional, por exemplo:
				counter = counter + 1
				counter++
				etc.
		no React, precisamos utilizar o conceito de Estado para modificar informaçoes.
		"Sempre que o estado for alterado o componente é renderizado novamente,
		exibindo as novas informações em tela."

	imutabilidade: por uma questão de performance não podemos alterar o valor do
	estado de um forma direta, o valor deve ser sobreposto.

			useState() => retorna um array [valorVariavel, funcaoAtualização]
			const [counter, seCounter] = useState(0);

7 - Pagina de login
	{
		- Criar uma pasta para armazenar as paginas e cada pagina vai ter
			sua pasta especifica.
		
		- Copiar as imagens heros e logo para ./src/assets.

		./
			└── public
					└── favicon.ico
					└── index.html
			└── src
					└── assets
							└── heroes.png
							└── logo.svg
					└── pages
							└── logon
								└── index.js
								└── style.css
					app.js
					global.css
					index.js
			.gitignore
			package-lock.json
			package.json
			yarn.lock

		7.1 Estilos globais:
			{
				A arquivo global.css estiliza componentes que se repetem em diferentes
				páginas. Por exemplo, a fonte utilizada em nosso site é global e todas as
				páginas devem usa-la.

					Utilizar a fonte roboto:
						https://fonts.google.com/?selection.family=Roboto
					
					Importa-la em global.css:
						@import url('https://fonts.googleapis.com/css?family=Roboto:400,500,700&display=swap');

					Colocando a fonte nos componentes html:
						input, button, textarea {
							font: 400 18px Roboto, sans-serif;
						}

				7.1.1 Classe de estilos:
					{
						global.css:
							.button { transition: filter 0.2s; }	
							.button:hover { filter: brightness(90%); }
							filter & transition escurecem o button quando o mouse passa sobre ele.
					}
			}

		7.2 Pacote de Icones:
				{
					Instalar o pacote de icones via npm:
						npm install react-icons

					Importar react-icons em /logon/index.js:
						import {FiLogIn} from 'react-icons/fi'  // https://feathericons.com/

					Utilizar icone especifico criar cadastro:
						<FiLogIn size={16} color="#E02041" />
				}

		7.3 Estilizando JSX com CSS:
			{
				logon/index.js:
					<div className="logon-container">
						<section className="form">
							<form>
								<h1></h1>
								<button className="button" type="submit"></button>
								<FiLogIn size={16} color="#E02041" />
							</form>
						</section>
					</div>	

				longon/style.css:
					.logon-container {}  // estiliza <div className="logon-container">
					.logon-containter section.form {}  // estiliza <section className="form">
					.logon-container section.form form {}  // estiliza <div> => <section> => <form>
					.logon-container section.form form h1 {}  // estiliza <div> => <section> => <form> => <h1> 

					7.2.1 class ou className em arquivo JSX:
						{
							Importando classe .button de global.css em /longon/index.js:
							<button className="button" type="submit">Entrar</button>

							No React usamos className="button" ao inves de class="button" como é
							no HTML, isso acontece porque class é uma palavra reservada dentro
							do javascript.
						}
					
					7.2.2
						{
							Icones do pacote react-icons são sempre chamados de svg então para
							estilizar o icone importado, basta fazer:
								
								.logon-container section.form form a svg {
									margin-right: 8px;
								}
						}
			}
	}

8 - Configurando Rotas
	{
		"As rotas também são componentes, por isso precisamos exporta-las."
		"<BroweserRouter> precisa envolver os itens do retorno na rota."
		"<Switch> garante que apenas um rota seja executada por vez."
		
		Instalar o pacote react-router-dom:
			npm install react-router-dom
		
		Criar arquivo routes.js em src.
			- importar react, componentes do react-router-dom e logon.
			- exportar uma funçao Routes().
			- importar Routes em App.js
		
		logon/index.js:
			import {Link} from 'react-router-dom'
				Este import serve para substituir os links <a> do HTML que
				recarregam a página inteira.
				Diferenças: <a> => <Link> e href => to

	}

9 - Conectando ao BackEnd (registrando ONG):
	{
		Iniciar o servidor backend aulas/backaend:
			npm run dev

		Instalar o cliente HTTP axios no FRONTEND:
			npm install axios

		- Criar pasta chamada services em src e criar um arquivo api.js
		- Importar api.js em register/index.js
			Api exporta uma constante do axios com um baseURL definido.
		- Criar a função HandleRegister(e) dentro da função Register() em index.js
		- Parametro e => evento padrao do formulario.
		- Açao no formulario, onSubmit={handleRegister}
		- e.preventDefault() para nao recarregar a página inteiro ao submeter.
		- Criando estado para valores do formulario, Dentro de Register() porém
		fora de handleRegister criar constantes de estado para armazenar os valores
		de entrada.
			const [name, setName] = useState(''); // '' texto começa vazio.

		- Em cada component HTML passar a variavel de estado como value e a função
		de atualização na propriedade onChange.
			<input
				placeholder="Nome da ONG"
				value={name}
				onChange={e => setName(e.target.value)}
		/>
	}

10 - Logon
	{
		OngId e ongName precisam estar disponiveis para qul ong está logada,
		por isso vamos salver estes dados no local storage /logon/index.js:
			localStorage.setItem('ongId', id);
    		localStorage.setItem('ongName', response.data.name);

		Colocando nome da ong no cabeçalho de profile page, /profile/index.js:
			const ongName = localStorage.getItem('ongName');
			<img src={logoImg} alt="Be The Hero" />
	}

11 - Profile
	{
		Quando a página /profile é aberta os casos devem ser renderizados auto-
		maticamente, sem precisar da ação do usuario.

		Importar useEffect do react, useEffet dispara uma função em determinado
		momento do componente, por exemplo, assim que ele é mostrado em tela.
		
		useEffect(() => {}, []);
			() => {} é a função que sera executada.
			[] array de dependencias, ou seja, se alguma informação dentro do array
			for modificada a função () => {} é disparada. Por exemplo, [ongName]
			se ongName for modificado a função será executada. O array vazio signi-
			fica que a função sera executada uma vez.

			É recomendado que se usada em useEffect a variavel deve ser colocada
			no array de dependencias.

			Listando os casos de uma ong especifica deve-se informar o ongID 
			através do header da requisição.

			useEffect(() => {
        		api.get('profile', { headers: { Authorization: ongId } })
        		.then(response => {
            	setIncidents(response.data);
        		})
    		}, [ongId]);
			
		Ao realizar iterações (map, foreach) dentro do react é importante
		setar uma key dentro de cada objeto renderizado, isso vai ajudar o
		react a encontrar os itens quando forem modificados.
			...
			<ul>
                {incidents.map(incident => (
                    <li key={incident.id}>
						<strong>CASO:</strong>
                        <p>{incident.title}</p>
					<li>
				))}
			</ul>
			...

		Iniciando array de incidents vazio:		
			const [incidents, setIncidents] = useState([]);

		Formatando valores com classe global Intl:
			Intl.NumberFormat(
				'pt-BR',
				{ style: 'currency', currency: 'BRL' })
 				.format(incident.value)
	}

12 - Deletando caso:

	Criar função handleDeleteIncident(). Para deletar um incidente é necessario 
	estar 'logado' como a ONG detentora do incidente, por isso é preciso
	passar o ongId como Authorization no header da requisição além do ID do caso
	a ser apagado:
		await api.delete(`incidents/${id}`, { headers: { Authorization: ongId }});  

	Maneira errada, passando retorno da função para onClick:
		<button onClick={handleDeleteIncident(incident.id)} type="button">

	Maneira correta, pasando a função para onClick:
		<button onClick={() => handleDeleteIncident(incident.id)} type="button">

13 - Atualizando interface após deleter incidente:
	
		Existem duas maneiras:
			Recarrega todos os dados da API, ou seja, trazer a lista atualizada.
			Varrer array de incidentes e procurar o ID e remover ele do array.

		Aplicando um filter no array e retornando apenas os incidents cuja condição
		é satisfeita, ou seja, todos que tem o id diferente do que sera deletado:
			setIncidents(incidents.filter(incident => incident.id !== id));

----------------------------------------------------------
---------------## @@@ QUARTA AULA @@@ ##------------------
----------------------------------------------------------

1 - Instalar o Expo globalmente, dentro da pasta aulas, executar:
		npm install -g expo-cli

2 - Iniciar o projeto, dentro da pasta aulas, executar:
		expo init mobile
	
3 - Escolheer a opção:
		expo-template-blank
	
4 - Acessar http://localhost:19002/ e escanear o QRcode no app Expo do celular.

5 - Observações:
	Em HTML tags como <h1> <p> <storn> possuem diferentes semanticas enquanto
	no react-native estes elemento possuem a mesma semantica.

	Exemplos:
		No react-native <text> é <text> não existe <h1> <h2> <p> etc..
		<view> usada para div, container, section, header, footer.
		<text> usada para h1, p, strong, etc.

	Estilização:
		- As estilizações sao feitas por uma tag chamada style e pela classe
			StyleSheet e seu método create().
		- Os elementos do react-native possuem display flex por padrçao.
		- Propriedades como background-color são camelCase => BackgroundColor.
		- Valores nao numéricos precisam estar entre aspas.

6 - Icone e splash screen:

	- Substituir icon.png e splash.png da pasta assets.
	- Alterar o background da splashScreen em app.json para '#E02041'.

7 - Navegacao/Rotas da aplicação:
	{
		A documentação do Expo pede a instação da reac-native navigation.

		https://docs.expo.io/versions/v35.0.0/guides/routing-and-navigation/#__next
		https://reactnavigation.org/docs/getting-started

		Instalando react-navigation:
			npm install @react-navigation/native
			expo install react-native-gesture-handler react-native-reanimated react-native-screens react-native-safe-area-context @react-native-community/masked-view
		
		Vamos usar o stack navigator (https://reactnavigation.org/docs/hello-react-navigation):
			npm install @react-navigation/stack

		Criar arquivo routes.js dentro de src:
			</NavigationContainer>
				Envolve as rotas, é obrigatorio.

			<AppStack.Navigator screenOptions={{ headerShown: false }}>
				Desabilita o cabeçalho padrão da aplicação.

			<AppStack.Screen name="Incidents" component={Incidents}>
				Representa uma rota, component representa uma página criada,
				name não é usado diretamente mas serve para determinar
				automaticamente o nome do cabeçalho da aplicação.
		
		Importar route.js em App.js:
			retornar <Routes/>  em App();
	}

8 - Estilizando Incidents:
	{
		Criar uma pasta chamada assets dentro de src e copiar logo.png nos
		tres tamanhos para assets.

		(index.js):
		Importar a logo, não é preciso importar os tres tamanhos de logo, a
		importação sera feita de acordo com o formato da tela:
			import logoImg from '../../assets/logo.png';

		(styles.js):
		Importar 'expo-constants' para que a logo nao fique abaixo do statusbar.
		Instalando:
			expo install expo-constants
		Importando:
			import Constants from 'expo-constants';
		Utilizando:
			paddingTop: Constants.statusBarHeight + 20

		Botão ver mais detalhes:
			{

				import { TouchableOpacity } from 'react-native';
					Torna qualquer coisa clicavel e diminui a opacidade do
					que foi clicado.

				import { Feather } from '@expo/vector-icons';
					Pacote de icones, vem instalado junto ao Expo.

				<TouchableOpacity
					style={styles.detailsButton}
					onPress={() => { }}>
					<Text style={styles.detailsButtonText}>Ver mais detalhes</Text>
					<Feather name="arrow-right" size={16} color="#E02041" ></Feather>
				</TouchableOpacity>
			}

		Renderizando lista de casos:
			{
				Para exibir a lista de casos vamos uilizar o componente FlatList:
				<FlatList
					data={[1, 2, 3, 4]}
					style={styles.incidentsList}
					keyExtractor={incident => String(incident)}
					showsVerticalScrollIndicator={false}
					renderItem={() => (
						<View>
							<Text>Item1</Text>
						</View>
					)}
				/>

				renderItem={() => ()}
					Função responsavel por renderizar os itens da lista, ela
					retorna um código JSX, por isso usa-se () e não {} no retorno.
			
				keyExtractor={incident => String(incident)}
					Evitar o warning sobre possuir uma key para cada entrada
					na lista. No react-native precisamos que seja uma string
					por isso passamos o constructor String em volta.

				showsVerticalScrollIndicator={false}
					Remover a barra de navegação lateral.
			}
	}
	
9 - Detalhes dos Incidents:
	{
		(/incidents/index.js), navegar ate detalhes de incidents:
		{
			import { useNavigation } from '@react-navigation/native';
		
			const navigation = useNavigation();
			function navigateToDetail() {
				navigation.navigate('Detail');  // Detail de routes.js
			}

			<TouchableOpacity
            	...
            	onPress={navigateToDetail}>
				...
			</TouchableOpacity>
		}

		(/detail/index.js), Retornar para a página anterior:
		{
			import { useNavigation } from '@react-navigation/native';

			const navigation = useNavigation();
			function navigateBack() {
				navigation.goBack();
			}

			<TouchableOpacity onPress={navigateBack}>
                <Feather name="arrow-left" size={28} color="#e02041"></Feather>
            </TouchableOpacity>
		}
	}

10 - Link whatsapp e email:
	{
		Instalar um pacote do expo para escrever emails:
			expo install expo-mail-composer
	
		Importar o MailComposer:
			import * as MailComposer from 'expo-mail-composer';

		Criar duas funções em /details/index.js:
			sendmail() e sendWhatsapp()
	}

11 - Conectando ao BD:
	{
		- Instalar a dependencia do axios, npm install axios
		- Criar pasta services dentro de src e criar arquivo api.js.
		- Utilizar o ip fornecido pelo Expo no localhost como baseURL.
		- Obter os dados da mesma maneira feita no frontEnd, criando estados e 
			funções para altera-los.
		- useEffect do 'react' é utilizada para renderizar informaçoes na tela,
			assim como é feito no frontend.

			{
				import React, { useState, useEffect } from 'react';

				const [incidents, setIncidents] = useState([]);
				const [totalIncidents, setTotalIncidents] = useState(0);

				useEffect(() => {
					api.get('incidents')
						.then(response => {
							setIncidents(response.data);
							setTotalIncidents(response.headers['x-total-count']);
						});
				}, []);
			}
		Diferente do frontend, no android é preciso instalar a a dependencia Intl
		para formatar os valores, npm install intl
	}
	
12 - Passando informaçoes entre telas:
	{
		(incidents/index.js)
			A função a seguir envia um objeto incident para a tela Detail quando
			o botão é clicado:
				<TouchableOpacity
					...
				onPress={() => navigation.navigate('Detail', {incident})}>
				...
				</TouchableOpacity>

		(/detail/index.js)
			Importar useRoute de '@react-navigation/native', essa importação
			serve para pegar as informaçoes de parametro passadas para a tela Detail.

			Obtendo o objeto incident passado para Detail:
				const incident = route.params.incident
	}