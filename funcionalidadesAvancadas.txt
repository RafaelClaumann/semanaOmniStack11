1 - Validações no backend:
    {
        Usar a biblioteca Celebrate para realizar validaçoes, por baixo
        dos panos a biblioteca Celebrate utiliza outra biblioteca chamada Joi
        para validação javascript. O Celebrate integra o joi com o 
        express.

        Celebrate: https://github.com/arb/celebrate
        Joi: https://github.com/hapijs/joi

        Instalar o Celebrate:
            npm install celebrate

        O correto é criar uma pasta só para os validators da aplicação mas por
        enquanto a validação ser feita em routes.js mesmo.

        Rotas que geralmente recebem validação:
            - rotas de criação 
            - rotas de alteração

        1.1 Fazendo validação em ongs:
            {
                (routes.js):
                const {celebrate, Segments, Joi} = require('celebrate');

                // precisamos que a validacao ocorra antes da criação
                // dentro do celebrate podemos validar parametros como
                // QueryParams, RouteParams e BodyRequest.
                // Segments(tipos de segmentos da requisição).
                routes.post('/ongs', celebrate({
                    [Segments.BODY]: Joi.objetct().keys({
                        name: Joi.string().required(),
                        email: Joi.string().required().email(),
                        whatsapp: Joi.string().required(),
                        city: Joi.string().required(),
                        uf: Joi.string().required().length(2)
                    })
                }), ongController.create);

                Testando a validação:
                    executar o servidor e testar a rota.
            }
        
            1.1.1 Validando cabeçalho:
                {
                    routes.get('/profile', celebrate({
                        [Segments.HEADER]: Joi.objetct({
                            Authorization: Joi.string().required()
                        }).unknown(),
                    }), ProfileController.index);
                }

            1.1.2 Validando RouteParam:
                {
                    routes.get('incidents/:id', celebrate({
                        [Segments.PARAMS]: Joi.object().keys({
                            id: joi.string.required()
                        })
                    }), IncidentController.delete);


                }
            1.1.3 Validando QueryParam
                {
                    routes.get('/incidents', celebrate({
                        [Segments.QUERY]: Joi.object().keys({
                            page: Joi.number()
                        })
                    }), IncidentController.index);
                }
            
        1.2 Evitar erros codigo 500:
            {
                Em index.js importar errors de celebrate:
                    import {errors} from 'celebrate'

                Depois das routes, utilizar o errors:
                    app.use(errors()) 
            }
    }

2 - Testes Automatizados
    {
        UnityTests: Testa partes isoladas da aplicação, uma função etc.
        IntegrationTests: Testa uma funcionalidade por inteiro, backend&frontend&mobile.

        2.1 Estrutura de Pastas
            {
                ./
                └── src
                    └── utils
                └── tests
                    └── unit
                    └── integration
            }

        2.2 Instalando Framework de Testes
            {
                Instalar o framework jest:
                npm intall jest -D

                Executar o comando & seguir as opçoes de instalaçao:
                    npx jest --init

                    Opçoes de instalaçao:
                        Jest when running "test" script in "package.json"?
                            - YES, adicionar script de teses em package.json.

                        Choose the test environment that will be used for testing.
                            - NODE, executar os testes no ambiente do nodeJS.

                        Do you want Jest to add coverage reports?
                            - NO, sera explicado adiante.

                        Automatically clear mock calls and instances between every test?
                            - YES, tudo que foi definido em um teste é invalida
                              para outro teste.
            }
        
        2.3 Criando Arquivos e Testando
            {
                Criar arquivo generateUniqueId.js em /src/utils para ilustrar
                os testesunitarios. Copiar a função que gera ID das ongs de
                ongController.js para generateUniqueId.js e exporta-la.

                (generateUniqueId.js)
                {
                    const crypto = require('crypto');

                    module.exports = function generateUniqueId() {
                        return crypto.randomBytes(4).toString('HEX');
                    }
                }
            
            Atualizar ongController.js importando a função generateUniqueId()
            de generateUniqueId.js.

                (ongController.js)
                {
                    const generateUniqueId = require('../utils/generateUniqueId');

                    const id = generateUniqueId();
                }

            Criar arquivo de teste dentro de /tests/unit:
            https://jestjs.io/docs/en/expect

            (generateUniqueId.spec.js)
                {
                    const generateUniqueId =  require('') // importar função generateUniqueId:

                    describe('Generate Unique ID',
                        () =>{
                            it('should generate an Unique Id',
                                () ={
                                    expect(id).toHaveLength(8);
                                });
                        }
                    );
                }
    }

1 - Criando Banco de Dados para Testes:
    {
        Criar uma nova conexão para o bando de testes em knexfile.js
            {
                test: {
                    client: 'sqlite3',
                        connection: {
                            filename: './src/database/test.sqlite'
                    },
                    migrations: {
                        directory: './src/database/migrations'
                    },
                    useNullAsDefault: true
                }
            }

        Ambiente de testes:
            {
                Dentro de /database/connection.js utilizamos conexão de development
                por padrão:
                        const connection = knex(configuration.development);
                mas precisamos de uma conexão diferente para o ambiente de testes.
                Isto é feito instalando o pacote cross-env.

                Instalando pacote cross-env:
                    npm install cross-env
        
                Alterar script de test em package.json:
                    "test":"cross-env NODE_ENV=test jest"
                    
                    https://blog.rocketseat.com.br/variaveis-ambiente-nodejs/
                    Quando o script de teste é executado a variavel ambiente
                    NODE_ENV fica disponivel, as variaveis ambiente do nodeJS
                    são acessiveis através da variavel global process.env.
        
                Acessando variavel NODE_ENV em (connection.js):
                    opção 1:
                        const config;
                        if (NODE_ENV === 'test') {
                              config = configurarion.test
                        } else {
                            config = configurarion.development
                        }

                        const connection = config;
                        
                    opção 2:
                        const config =
                            process.env.NODE_ENV === 'test'
                                ? configurarion.test
                                    : configurarion.development;
                            
                        const connection = config;
            }

        Primeiro teste de integração:
            {
                ./
                └── src
                └── tests
                    └── unit
                    └── integration

                Criar arquivo (ong.spec.js) dentro da pasta integration.
                    {
                        describe('ONG',() =>{
                            it('should be able to create a new ong' , () => {});
                        });

                        Como fazer esse teste? importar o controller da ong?
                        esperar seu retorno? não!
                        A biblioteca supertest é usada para realizar estes testes,
                        além das requisições HTTP essa biblioteca ainda traz
                        algumas validações a mais no retorno da API.
                        
                        Instalar a biblioteca:
                            npm install supertest -D
                        
                        Importar a biblioteca:
                            const request = require('supertest')
                    }
            
                Para realizar os testes é preciso subir o servidor de testes, então
                é necessario importar index.js em ong.spec.js para que isso seja 
                possivel. Se index.js for importado e executado dentro de ong.spec.js
                o servidor de desenvolvimento estara disponivel e não é isso que
                queremos, queremos apenas o servidor de testes.
            
                Para resolver:
                    - Trocar o nome de index.js por app.js.
                        Substituir de app.listen(3333) por module.exports = app;

                    - Dentro de src criar server.js.
                        const app = require('./app);
                        app.listen(3333);

                    - Alterar script dev em package.json:
                        "dev": "nodemon ./src/server.js"
                
                Voltando a ong.spec.js:
                    {
                        Importar app.js e connection:
                            const request = require('supertest');
                            const app = require('./app');
                            const connection = require('../../src/database/connection);
                        
                        Função de testes:
                            // limpar banco de dados antes de cada teste.
                            beforeEach( async () => {
                                await connection.migrate.rollback()
                                await connection.migrate.latest()
                            });

                            // desfazer a conexão após os testes.
                            afterAll(async () => {
                                await connection.destroy();
                            });

                            it('should be able to create new ong' , async () => {
                                const response =
                                    await request(app)
                                    .post('/ongs')
                                    .send({
                                        name:"apad",
                                        email:"email@email.com",
                                        whatsapp:"48000000000",
                                        city:"floripa",
                                        uf:"sc"                            
                                    });
                                expect(response.body).toHaveProperty('id');
                                expect(response.body.id).toHaveLength(8);
                            });

                        Passando header de autorização na chamada:
                            ...
                            .post('/ongs')
                            .set('Authorization', 'ongID)
                            .send({
                            ...                        
                    }
    }     
}
