1 - Validações no backend:
    {
        Usar a biblioteca Celebrate para realizar validaçoes, por baixo
        dos panos a biblioteca Celebrate utiliza outra biblioteca chamada Joi
        para validação javascript. O Celebrate integra o joi com o 
        express.

        Celebrate: https://github.com/arb/celebrate
        Joi: https://github.com/hapijs/joi

        Instalar o Celebrate:
            npm install celebrate

        O correto é criar uma pasta só para os validators da aplicação mas por
        enquanto a validação ser feita em routes.js mesmo.

        Rotas que geralmente recebem validação:
            - rotas de criação 
            - rotas de alteração

        1.1 Fazendo validação em ongs:
            {
                (routes.js):
                const {celebrate, Segments, Joi} = require('celebrate');

                // precisamos que a validacao ocorra antes da criação
                // dentro do celebrate podemos validar parametros como
                // QueryParams, RouteParams e BodyRequest.
                // Segments(tipos de segmentos da requisição).
                routes.post('/ongs', celebrate({
                    [Segments.BODY]: Joi.objetct().keys({
                        name: Joi.string().required(),
                        email: Joi.string().required().email(),
                        whatsapp: Joi.string().required(),
                        city: Joi.string().required(),
                        uf: Joi.string().required().length(2)
                    })
                }), ongController.create);

                Testando a validação:
                    executar o servidor e testar a rota.
            }
        
            1.1.1 Validando cabeçalho:
                {
                    routes.get('/profile', celebrate({
                        [Segments.HEADER]: Joi.objetct({
                            Authorization: Joi.string().required()
                        }).unknown(),
                    }), ProfileController.index);
                }

            1.1.2 Validando RouteParam:
                {
                    routes.get('incidents/:id', celebrate({
                        [Segments.PARAMS]: Joi.object().keys({
                            id: joi.string.required()
                        })
                    }), IncidentController.delete);


                }
            1.1.3 Validando QueryParam
                {
                    routes.get('/incidents', celebrate({
                        [Segments.QUERY]: Joi.object().keys({
                            page: Joi.number()
                        })
                    }), IncidentController.index);
                }
            
        1.2 Evitar erros codigo 500:
            {
                Em index.js importar errors de celebrate:
                    import {errors} from 'celebrate'

                Depois das routes, utilizar o errors:
                    app.use(errors()) 
            }
    }

2 - Testes Automatizados
    {
        UnityTests: Testa partes isoladas da aplicação, uma função etc.
        IntegrationTests: Testa uma funcionalidade por inteiro, backend&frontend&mobile.

        2.1 Estrutura de Pastas
            {
                ./
                └── src
                    └── utils
                └── tests
                    └── unit
                    └── integration
            }

        2.2 Instalando Framework de Testes
            {
                Instalar o framework jest:
                npm intall jest -D

                Executar o comando & seguir as opçoes de instalaçao:
                    npx jest --init

                    Opçoes de instalaçao:
                        Jest when running "test" script in "package.json"?
                            - YES, adicionar script de teses em package.json.

                        Choose the test environment that will be used for testing.
                            - NODE, executar os testes no ambiente do nodeJS.

                        Do you want Jest to add coverage reports?
                            - NO, sera explicado adiante.

                        Automatically clear mock calls and instances between every test?
                            - YES, tudo que foi definido em um teste é invalida
                              para outro teste.
            }
        
        2.4 Criando Arquivos e Testando
            {
                Criar arquivo generateUniqueId.js em /src/utils para ilustrar
                os testesunitarios. Copiar a função que gera ID das ongs de
                ongController.js para generateUniqueId.js e exporta-la.

                (generateUniqueId.js)
                {
                    const crypto = require('crypto');

                    module.exports = function generateUniqueId() {
                        return crypto.randomBytes(4).toString('HEX');
                    }
                }
            
            Atualizar ongController.js importando a função generateUniqueId()
            de generateUniqueId.js.

                (ongController.js)
                {
                    const generateUniqueId = require('../utils/generateUniqueId');

                    const id = generateUniqueId();
                }

            Criar arquivo de teste dentro de /tests/unit:
            https://jestjs.io/docs/en/expect

            (generateUniqueId.spec.js)
                {
                    const generateUniqueId =  require('') // importar função generateUniqueId:

                    describe('Generate Unique ID',
                        () =>{
                            it('should generate an Unique Id',
                                () ={
                                    expect(id).toHaveLength(8);
                                });
                        }
                    );
                }
    }
